Map Interface in Java

The java.util.Map interface represents a mapping between a key and a value. 
The Map interface is not a subtype of the Collection interface,Therefore it behaves a bit different from the rest of the collection types.

Few characteristics of the Map Interface are:

A Map cannot contain duplicate keys and each key can map to at most one value. 
Some implementations allow null key and null value like the HashMap and LinkedHashMap, but some do not like the TreeMap.
The order of a map depends on specific implementations, e.g TreeMap and LinkedHashMap have predictable order, while HashMap does not.
There are two interfaces for implementing Map in java: Map and SortedMap, and three classes: HashMap, TreeMap and LinkedHashMap.






Hashmap vs Hashtable

-HashMap is non synchronized. It is not-thread safe and can’t be shared between many threads without proper synchronization code whereas Hashtable is synchronized. 
 It is thread-safe and can be shared with many threads.
-HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value.
-HashMap is generally preferred over HashTable if thread synchronization is not needed

Why HashTable doesn’t allow null and HashMap does?
To successfully store and retrieve objects from a HashTable, the objects used as keys must implement the hashCode method and the equals method. 
Since null is not an object, it can’t implement these methods. HashMap is an advanced version and improvement on the Hashtable. HashMap was created later.